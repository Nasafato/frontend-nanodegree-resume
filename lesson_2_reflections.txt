What happens when you initialize a repository? Why do you need to do it?

   It creates a .git folder that stores metadata on all the files and folders 
   inside the directory that the .git folder is located in. From there, every 
   time you make a commit or a change, data on that file is stored in .git. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

   The working directory contains everything that you're working on as well as
   the git repository. The repository is a git representation of that directory.
   The staging area is the intermediate area between the two: files from the
   working directory that you care about track are put into the staging area, 
   where you can then commit the changes you make to the repository.

How can you use the staging area to make sure you have one commit per logical
change?
   
   You can add files to the staging area that are part of the logical change.
   Then you can compare that modified file to the last commit and see if the
   changes are logical.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

   Using branches, you can create multiple different "pathways" of development.
   They can be experimental, or they can have the purpose of modifying the 
   original working directory so that it serves a different function. Also, you
   can then checkout to these various branches to work on features specific to
   the purpose you want to achieve with these branches that don't overlap with
   your other branches. 

How do the diagrams help you visualize the branch structure?

   Checking out moves you to a different part of the branch, or to a different
   branch altogether. If things haven't solidified to a branch yet, then those
   changes/commits will be lost if you move to a part of the branch that is
   before the point at which you started to branch off but didn't create a new
   branch for those changes.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

   Merging them together incorporates wanted changes made to the original parent
   file along both branches, and merges them back into the master branch.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

   Automatic merging saves you time when you're merging branches, but there is
   potential for the automatic merge to not be good or to have errors. Manual
   merging is tedious and may not always be necessary, but it helps you identify
   potential conflicts in the merge. 




